from flask import Flask, flash, request, redirect, url_for
from os.path import join, dirname, realpath
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from .systemFunctions import *
from os import path
import warnings
import logging
import click
import os


db = SQLAlchemy()       # Using SQLAlchemy as our database engine of this project.
DB_NAME = "database.db" # Filename and location of the database.
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'docx', 'doc'} # Allowed file extensions to be uploaded.
UPLOAD_FOLDER = join(dirname(realpath(__file__)), 'static/img/')

# If you want to make application more stable, disable the setting below by setting the value to `False`.
GENERATE_SECRET_KEY_ON_RESTART = True
SECRET_KEY = 'YOUR-ULTRA-RANDOM-SECRET-KEY-1337' # Set secure secret key, if auto-generation of secret keys is disabled. 

ADMIN = "admin@localhost.com"      # Email authorized to directly run debugging functionalities, if value below is set to `True`.
DEBUG_ENABLED = False               # Disable for additional security - disables command execution in `/debug`.
SIGNUP_ENABLED = True              # Disable if you do not want signup to be accessible.

MIN_NUMBER_FILEGENERATOR = 100000
MAX_NUMBER_FILEGENERATION = 999999 # Useful to set higher in order to increase randomness.

# Directory setting below, where everything generated by this application will be located.
GENERATED_OUTPUT_DIRECTORY          = 'generated/' # Directory is under website/
SUBDOMAIN_SCAN_OUTPUT_DIRECTORY     = join(dirname(realpath(__file__)), GENERATED_OUTPUT_DIRECTORY, 'subdomains/')
PORT_SCAN_OUTPUT_DIRECTORY          = join(dirname(realpath(__file__)), GENERATED_OUTPUT_DIRECTORY, 'ports/')
VULNERABILITY_SCAN_OUTPUT_DIRECTORY = join(dirname(realpath(__file__)), GENERATED_OUTPUT_DIRECTORY, 'vulnerabilities/')
GENERATED_OUTPUT_DIRECTORY          = join(dirname(realpath(__file__)), GENERATED_OUTPUT_DIRECTORY)

# This is for developers.
# If you want to see general logging messages, such as: 127.0.0.1 - - [15/Feb/2013 10:52:22] "GET /index.html HTTP/1.1" 200
# then go ahead and replace `True` to `False`.
GENERAL_LOGGING_DISABLED = False

# Screenshotting and other functionality settings below.
SCREENSHOT_DELAY_SECONDS = 2 # Increase the delay if getting no responses from alive targets.
PING_COUNT_NUMBER = 2        # Increase the number if you want to get more accurate results.
GOSPIDER_DEPTH_NUMBER = 5    # Increase to get more results from crawling a target.
AMASS_TIMEOUT_MINUTES = 15   # Increase or decrease if the amass scan takes too much time.
WAYMORE_TIMEOUT_MINUTES = 20 # Increase or decrease if the waymore scan takes too much time.


def create_app():
    print("[+] Flask application started - 127.0.0.1:5000!")
    app = Flask(__name__)
    
    if GENERATE_SECRET_KEY_ON_RESTART == True:
        app.config['SECRET_KEY'] = generateSafeSecret() # Generates safe UUID4 secret key, looks like: `3d6f45a5fc12445dbac2f59c3b6c7cb1`.
    else:
        app.config['SECRET_KEY'] = SECRET_KEY

    app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{DB_NAME}' # Connection string to our database.
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True            # A configuration to enable or disable tracking modifications of objects. You set it to False to disable tracking and use less memory.
    db.init_app(app) # Initialize the app. Obviously.

    log = logging.getLogger('werkzeug')
    log.disabled = GENERAL_LOGGING_DISABLED
    app.logger.disabled = GENERAL_LOGGING_DISABLED
    warnings.filterwarnings("ignore")
    
    def secho(text, file=None, nl=None, err=None, color=None, **styles):
        return
    def echo(text, file=None, nl=None, err=None, color=None, **styles):
        return

    click.echo = echo
    click.secho = secho


    from .views import views
    from .auth import auth

    app.register_blueprint(views, url_prefix='/')
    app.register_blueprint(auth, url_prefix='/')

    from .models import User
    
    with app.app_context():
        db.create_all()

    login_manager = LoginManager()
    login_manager.login_view = 'auth.login'
    login_manager.init_app(app)

    @login_manager.user_loader
    def load_user(id):
        return User.query.get(int(id))

    return app


def create_database(app):
    if not path.exists('website/' + DB_NAME):
        db.create_all(app=app)
        print('Created Database!')
